/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var d=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var P=(n,s)=>{for(var t in s)d(n,t,{get:s[t],enumerable:!0})},x=(n,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let a of S(s))!E.call(n,a)&&a!==t&&d(n,a,{get:()=>s[a],enumerable:!(e=w(s,a))||e.enumerable});return n};var T=n=>x(d({},"__esModule",{value:!0}),n);var v={};P(v,{default:()=>g});module.exports=T(v);var i=require("obsidian");var h=new Set(["ttf","otf","woff","woff2"]),p=["interface","text","monospace"],r={interfaceNormalFont:{variant:"interface",weight:"normal",style:"normal",description:"Path to base font for all of Obsidian."},interfaceBoldFont:{variant:"interface",weight:"bold",style:"normal",description:"Path to base font for all of Obsidian (bold)."},interfaceItalicFont:{variant:"interface",weight:"bold",style:"italic",description:"Path to base font for all of Obsidian (italic)."},textNormalFont:{variant:"text",weight:"normal",style:"normal",description:"Path to font for editing and reading views."},textBoldFont:{variant:"text",weight:"bold",style:"normal",description:"Path to font for editing and reading views (bold)."},textItalicFont:{variant:"text",weight:"bold",style:"italic",description:"Path to font for editing and reading views (italic)."},monospaceFont:{variant:"monospace",weight:"normal",style:"normal",description:"Path to font for places like code blocks and frontmatter."}};var l=require("obsidian");var c=class extends l.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}getKeyDisplayName(t){return t.split(/(?=[A-Z])/).join(" ").toLowerCase().replace(/^\w/,e=>e.toUpperCase())}display(){this.containerEl.empty(),this.plugin.allSettingsKeys.forEach(t=>new l.Setting(this.containerEl).setName(this.getKeyDisplayName(t)).setDesc(r[t].description).addText(e=>e.setPlaceholder("Default").setValue(this.plugin.settings[t].path).onChange(async a=>{this.plugin.settings[t].path=a,this.plugin.settings[t].base64="",await this.plugin.saveSettings()}))),new l.Setting(this.containerEl).addButton(t=>t.setButtonText("Reload fonts").setCta().onClick(async()=>await this.plugin.reloadFonts()))}};var F={interfaceNormalFont:{path:"",base64:""},interfaceBoldFont:{path:"",base64:""},interfaceItalicFont:{path:"",base64:""},textNormalFont:{path:"",base64:""},textBoldFont:{path:"",base64:""},textItalicFont:{path:"",base64:""},monospaceFont:{path:"",base64:""}};var g=class extends i.Plugin{constructor(){super(...arguments);this.base64Cache=new Map}get definedSettingsKeys(){return this.allSettingsKeys.filter(t=>this.settings[t].path)}getFontFileFormat(t){let e=t.split(".").pop();if(!e||!h.has(e))throw new Error(`File at ${t} has invalid extension (must be one of ${Array.from(h).join(", ")})`);return e==="ttf"?"truetype":e}async loadFontAt(t){var f;let e=Date.now(),{path:a,base64:o}=this.settings[t];if(a=(0,i.normalizePath)(a),!await this.app.vault.adapter.exists(a))throw o&&(this.settings[t].base64="",await this.saveSettings()),new Error(`Font file at ${a} does not exist`);o||(o=(f=this.base64Cache.get(a))!=null?f:(0,i.arrayBufferToBase64)(await this.app.vault.adapter.readBinary(a)),this.settings[t].base64=o,await this.saveSettings()),this.base64Cache.set(a,o);let{variant:m,style:y,weight:u}=r[t],b=await new FontFace(`Easy Fonts ${m} Font`,`url(data:font/${this.getFontFileFormat(a)};base64,${o})`,{weight:u,style:y,display:"swap"}).load();document.fonts.add(b),console.info(`Loaded font at ${a} in ${Date.now()-e}ms`)}async loadFonts(){await Promise.all(this.definedSettingsKeys.map(async t=>{try{await this.loadFontAt(t)}catch(e){console.error(e),new i.Notice(e)}})),this.base64Cache.clear(),p.filter(t=>this.definedSettingsKeys.some(e=>r[e].variant===t)).forEach(t=>document.body.style.setProperty(`--font-${t}-theme`,`Easy Fonts ${t} Font`))}unloadFonts(){this.base64Cache.clear(),document.fonts.forEach(t=>{t.family.startsWith("Easy Fonts")&&document.fonts.delete(t)}),p.map(t=>`--font-${t}-theme`).forEach(t=>{document.body.style.getPropertyValue(t).startsWith("Easy Fonts")&&document.body.style.removeProperty(t)})}get allSettingsKeys(){return Object.keys(this.settings)}async reloadFonts(){this.unloadFonts(),await this.loadFonts()}async onload(){await this.loadSettings(),await this.loadFonts(),this.addCommand({id:"reload-fonts",name:"Reload fonts",callback:this.reloadFonts.bind(this)}),this.addSettingTab(new c(this.app,this))}onunload(){this.unloadFonts()}async loadSettings(){this.settings=Object.assign({},F,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */